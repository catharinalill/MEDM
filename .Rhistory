#Have to include the files in the same folder the Rmarkdown is in.
airlines = read.csv("airlines.csv")
#Have to include the files in the same folder the Rmarkdown is in.
airlines = read.csv("airlines.csv")
airports = read.csv("airports.csv")
flights = read.csv("flights.csv")
#Have to include the files in the same folder the Rmarkdown is in.
airlines = read.csv("airlines.csv")
airports = read.csv("airports.csv")
flights = read.csv("flights.csv")
library(ggplot2)  #for ggplot
library(class)    #for confusion matrices
library(caret)    #for knn function
library(GGally)
install.packages(GGally)
install.packages("GGally")
library(GGally)
library(corrplot)
plot_str(flights[,c(2:10)]) #When we have found the response variable add this: c(2:10,response variable)
library(ggplot2)  #for ggplot
library(class)    #for confusion matrices
library(caret)    #for knn function
library(GGally)
library(corrplot)
plot_str(flights[,c(2:10)]) #When we have found the response variable add this: c(2:10,response variable)
#Search for missing values
plot_missing(flights)
library(ggplot2)  #for ggplot
library(class)    #for confusion matrices
library(caret)    #for knn function
library(GGally)
library(corrplot)
#NEED TO CREATE RESPONSE VARIABLE HERE
#The first variable in our flights dataset is YEAR = 2015, which is equal for all so we should not include
# this in the data analysis/classification.
#DATA ANALYSIS
plot_str(flights[,c(2:10)]) #When we have found the response variable add this: c(2:10,response variable)
install.packages("DataExplorer")
install.packages("DataExplorer")
#Have to include the files in the same folder the Rmarkdown is in.
airlines = read.csv("airlines.csv")
airports = read.csv("airports.csv")
flights = read.csv("flights.csv")
library(ggplot2)  #for ggplot
library(class)    #for confusion matrices
library(caret)    #for knn function
library(GGally)
library(corrplot)
#NEED TO CREATE RESPONSE VARIABLE HERE
#The first variable in our flights dataset is YEAR = 2015, which is equal for all so we should not include
# this in the data analysis/classification.
#DATA ANALYSIS
plot_str(flights[,c(2:10)]) #When we have found the response variable add this: c(2:10,response variable)
library(ggplot2)
library(class)
library(caret)
library(GGally)
library(corrplot)
plot_str(flights[,c(2:10)])
#Have to include the files in the same folder the Rmarkdown is in.
airlines = read.csv("airlines.csv")
airports = read.csv("airports.csv")
flights = read.csv("flights.csv")
library(ggplot2)  #for ggplot
library(class)    #for confusion matrices
library(caret)    #for knn function
library(GGally)
library(corrplot)
library(MASS)     #for LDA
library(leaps)
install.packages("leaps")
library(leaps)    #for Forward selection
#Search for missing values
plot_missing(flights)
##Remove the observations for which the flight was cancelled
handled_flights <- flights[flights$CANCELLED<1,]
#Remove columns YEAR (2015 for all observations), CANCELLATION_REASON (since we are now dealing with flights that
#were not cancelled), CANCELLED (will have 0's since these are the flights that were not cancelled)
#and DIVERTED (will have 0's, non of the non cancelled flights was diverted)
handled_flights$YEAR <- NULL
handled_flights$CANCELLATION_REASON <- NULL
handled_flights$CANCELLED <- NULL
handled_flights$DIVERTED <- NULL
#Erase columns which have NA for some observations
handled_flights$AIR_SYSTEM_DELAY <- NULL
handled_flights$SECURITY_DELAY <- NULL
handled_flights$AIRLINE_DELAY <- NULL
handled_flights$LATE_AIRCRAFT_DELAY <- NULL
handled_flights$WEATHER_DELAY <- NULL
handled_flights<- handled_flights[is.na(handled_flights$ARRIVAL_DELAY)==FALSE,]
#Create new column (DELAY: 0 if the flight is not delayed by more than 5 minutes, 1 if the flight is delayed by more than 5 minutes)
#Here we consider only the arrival delay  (THIS CHOICE SHOULD BE JUSTIFIED IN THE REPORT!)
handled_flights$DELAY <- ifelse(handled_flights$ARRIVAL_DELAY > 5,handled_flights$DELAY <- 1,handled_flights$DELAY <- 0)
View(handled_flights)
handled_flights2 <- handled_flights[c(4,23)]
View(handled_flights2)
indxTrain <- createDataPartition(y = handled_flights2[,23], p = 0.8,list = FALSE)
indxTrain <- createDataPartition(y = handled_flights2[,2], p = 0.8,list = FALSE)
train.data <- handled_flights2[indxTrain,]
test.data <- handled_flights2[-indxTrain,]
train.control <- trainControl(method = "cv",number = 10)
# Train the model
set.seed(0) # To fix the random process at splitting data
pred.knn.cv <- train(CL~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:20),
trControl  = train.control,
metric     = "Accuracy",
data       = cbind(CL = as.factor(train.data[,23]), train.data[,-23]))
indxTrain <- createDataPartition(y = handled_flights2[,2], p = 0.8,list = FALSE)
train.data <- handled_flights2[indxTrain,]
test.data <- handled_flights2[-indxTrain,]
train.control <- trainControl(method = "cv",number = 10)
# Train the model
set.seed(0) # To fix the random process at splitting data
pred.knn.cv <- train(CL~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:20),
trControl  = train.control,
metric     = "Accuracy",
data       = cbind(CL = as.factor(train.data[,2]), train.data[,-2]))
create_report(flights)
library(DataExplorer)
create_report(flights)
View(flights)
View(handled_flights)
View(handled_flights)
indxTrain <- createDataPartition(y = handled_flights[,23], p = 0.8,list = FALSE)
train.data <- handled_flights[indxTrain,]
test.data <- handled_flights[-indxTrain,]
train.control <- trainControl(method = "cv",number = 10)
set.seed(0) # To fix the random process at splitting data
pred.knn.cv <- train(CL~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:20),
trControl  = train.control,
metric     = "Accuracy",
data       = cbind(CL = as.factor(train.data[,23]), train.data[,-23]))
